# https://taskfile.dev

#Called by the vnbuild system to produce builds for my website
#https://www.vaughnnugent.com/resources/software

version: "3"

vars:

  BINARY_DIR: '{{ .BINARY_DIR | default "bin" }}'

  BUILDS_URL: https://www.vaughnnugent.com/public/resources/software/builds
  SQLITE_OUT_DIR: "plugins/assets/VNLib.Plugins.Extensions.Loading.Sql.SQLite"

  PLUGIN_NAME: 'SimpleBookmark'
  CORE_VERSION: '61fa36a94a8829ed8d5247e718e177c65364fea5'
  ESSENTIALS_VERSION: '785bb68b2670e982a199fe3be93aa50a08c7af77'
  CACHE_VERSION: '71e35edf9c3836b867d17c513545bb9f3d2ad544'
  EXTENSIONS_VERSION: '5f3a05b0e9f6b2b7ed6f605912f17e1925203eda'

  TARGET_ARCHES: [ 'windows-x86_64', 'linux-x86_64', 'osx-x86_64', 'windows-arm', 'linux-arm', 'osx-arm', 'posix' ]

includes:
  install:
    taskfile: install.taskfile.yaml

  plugins:
    taskfile: plugins.taskfile.yaml

tasks:

  build:
    deps:
      - compile-config
      - plugins:all
    cmds:
     #remove runtime-shared libs before they are copied
    - task: prune-plugin-libs
    - task: parallel-envs

    #runtimes must be pruned for specific targets
    - task: prune-runtimes

  parallel-envs:
    deps:
     - for: { var: TARGET_ARCHES }
       task: create-env
       vars: { TARGET_OS: '{{ .ITEM }}' }
     - task: setup-container

  #similar to create-env task, except specialized for a container deployment
  setup-container:
    internal: true
    cmds:
      - cmd: powershell mkdir -Force "build/{{ .TARGET_OS }}"
     
      #copy build files for container build in the 'app/' directory
      - for: [ plugins, lib, webserver ]
        cmd: cd build/
          && powershell mkdir -Force "container/app/{{ .ITEM }}"
          && powershell cp -Recurse -Force "{{ .ITEM }}" "container/app"

      - cmd: powershell cp -Recurse -Force "config-templates" "build/container/app"

      #docker specific files go in the root dir
      - for: [ Dockerfile, docker-compose.yaml ]
        cmd: powershell cp -Force {{ .ITEM }} build/container

      # copy the compile script and taskfile, rename the taskfile to Taskfile.yaml
      - cmd: powershell cp -Force 'compile.sh' 'build/container/app'
      - cmd: cd build/container/app && wsl dos2unix compile.sh
      - cmd: powershell cp -Force release.taskfile.yaml "build/container/app/Taskfile.yaml"

  create-env:
    cmds:
    #create dir for env
    - cmd: powershell mkdir -Force "build/{{ .TARGET_OS }}"
    
    #copy build files for target os
    - for: [ plugins, lib, config, webserver, dist ]
      cmd: cd build/ && powershell cp -Recurse -Force "{{ .ITEM }}" "{{ .TARGET_OS }}"

    #copy release taskfile and rename it
    - cmd: powershell cp -Force release.taskfile.yaml "build/{{ .TARGET_OS }}/Taskfile.yaml"

  compile-config:
    internal: true
    dotenv: ['build.env']  #use the local .env file when compiling config variables
    cmds:
     - cmd: powershell mkdir -Force 'build/config/'
     - cmd: powershell './compile.ps1' -InputDir 'config-templates/' -OutputDir 'build/config/'
     - cmd: powershell cp config-templates/routes.xml build/config/routes.xml -Force

  prune-plugin-libs:
    internal: true
    dir: build/plugins
    vars:
      FILES:
        VNLib.Utils.dll
        VNLib.Net.Http.dll
        VNLib.Hashing.Portable.dll
        VNLib.Plugins.Essentials.dll
        VNLib.Plugins.dll
        Serilog.dll
        Serilog.Sinks.Console.dll
        Serilog.Sinks.File.dll
        *.xml
        *.pdb
    cmds:
    - for: { var: FILES }
      cmd: powershell 'Get-ChildItem -Path . -Recurse -File -Filter "{{ .ITEM }}" | Remove-Item -Force'

  prune-runtimes:
    vars:
      WIN: 'browser-wasm,linux-arm,linux-arm64,linux-armel,linux-mips64,linux-musl-arm,linux-musl-arm64,linux-musl-x64,linux-ppc64le,linux-s390x,linux-x64,linux-x86,maccatalyst-arm64,maccatalyst-x64,osx-arm64,osx-x64,win-arm,win-arm64'
      WIN_ARM: 'browser-wasm,linux-arm,linux-arm64,linux-armel,linux-mips64,linux-musl-arm,linux-musl-arm64,linux-musl-x64,linux-ppc64le,linux-s390x,linux-x64,linux-x86,maccatalyst-arm64,maccatalyst-x64,osx-arm64,osx-x64,win-x86,win-x64'
      LINUX: 'browser-wasm,linux-arm,linux-arm64,linux-armel,linux-musl-arm,linux-musl-arm64,maccatalyst-arm64,maccatalyst-x64,osx-arm64,osx-x64,win-arm,win-arm64,win-x86,win-x64'
      LINUX_ARM: 'browser-wasm,linux-mips64,linux-musl-x64,linux-ppc64le,linux-s390x,linux-x64,linux-x86,maccatalyst-arm64,maccatalyst-x64,osx-arm64,osx-x64,win-arm,win-arm64,win-x86,win-x64'
      OSX: 'browser-wasm,linux-arm,linux-arm64,linux-armel,linux-mips64,linux-musl-arm,linux-musl-arm64,linux-musl-x64,linux-ppc64le,linux-s390x,linux-x64,linux-x86,maccatalyst-arm64,win-arm,win-arm64,win-x86,win-x64'
      OSX_ARM: 'browser-wasm,linux-arm,linux-arm64,linux-armel,linux-mips64,linux-musl-arm,linux-musl-arm64,linux-musl-x64,linux-ppc64le,linux-s390x,linux-x64,linux-x86,maccatalyst-x64,osx-x64,win-arm,win-arm64,win-x86,win-x64'
      #NOTE: The container targets debian builds (arm, x86 and x64)
      CONTAINER: '{{ .LINUX }},linux-ppc64le,linux-s390x,linux-mips64,linux-musl-x64'
    deps:
    #prune sqlite runtime native libraries that Im not targeting
    #windows
    - task: prune-files 
      vars: { ITEMS: '{{ .WIN }}', DIR: 'windows-x86_64' }
    #windows arm
    - task: prune-files 
      vars: { ITEMS: '{{ .WIN_ARM }}', DIR: 'windows-arm' }
    #linux x64
    - task: prune-files
      vars: { ITEMS: '{{ .LINUX }}', DIR: 'linux-x86_64' }
    #linux arm
    - task: prune-files
      vars: { ITEMS: '{{ .LINUX_ARM }}', DIR: 'linux-arm' }
    #osx x64
    - task: prune-files
      vars: { ITEMS: '{{ .OSX }}', DIR: 'osx-x86_64' }
    #osx arm
    - task: prune-files
      vars: { ITEMS: '{{ .OSX_ARM }}', DIR: 'osx-arm' }
    #container is linux amd64 target
    - task: prune-files
      vars: { ITEMS: '{{ .CONTAINER }}', DIR: 'container/app' }

  prune-files:
    internal: true
    cmds:
     - for: { var: ITEMS, split: ','}
       cmd: cd build/{{ .DIR }}/{{ .SQLITE_OUT_DIR }}/runtimes && powershell rm -Recurse -Force "{{ .ITEM }}"
       ignore_error: true

  postbuild_success:
    cmds:
    - cmd: powershell mkdir -Force {{ .BINARY_DIR }}
    - task: pb-parallel

    #cleanup unnecessary build files that clog up the pipeline
    - for: [ build ]
      cmd: powershell rm -Recurse '{{ .ITEM }}'
      ignore_error: true

  pb-parallel:
    internal: true
    deps:
     - for: { var: TARGET_ARCHES }
       task: pack 
       vars: { TARGET_OS: '{{ .ITEM }}' }
     
     #container is built separately
     - task: pack
       vars: { TARGET_OS: 'container' }
    cmds:
    - echo "Packing complete"

  pack:
    internal: true
    cmds:
    - cmd: powershell mkdir -Force "build/{{ .TARGET_OS }}/"
      ignore_error: true
    - cmd: cd build/{{ .TARGET_OS }} && tar -czf ../../bin/{{ .TARGET_OS }}-release.tgz . 

  clean:
    ignore_error: true
    cmds:
    - for: [ build/, bin/ ]
      cmd: powershell rm -Recurse -Force '{{ .ITEM }}'
